#include "hsp3utf.as"

#include "data/struct_module.hsp"

#module

#deffunc primitive_manager_init
    sdim type_list
    type_list(0)="unsigned_int"
    type_list(length(type_list))="unsigned"
    type_list(length(type_list))="__int8"
    type_list(length(type_list))="char"
    type_list(length(type_list))="unsigned___int8"
    type_list(length(type_list))="unsigned_char"
    type_list(length(type_list))="__int16"
    type_list(length(type_list))="short"
    type_list(length(type_list))="short_int"
    type_list(length(type_list))="signed_short_int"
    type_list(length(type_list))="unsigned___int16"
    type_list(length(type_list))="unsigned_short"
    type_list(length(type_list))="unsigned_short_int"
    type_list(length(type_list))="__int32"
    type_list(length(type_list))="signed"
    type_list(length(type_list))="signed_int"
    type_list(length(type_list))="int"
    type_list(length(type_list))="unsigned___int32"
    type_list(length(type_list))="__int64"
    type_list(length(type_list))="long_long"
    type_list(length(type_list))="signed_long_long"
    type_list(length(type_list))="unsigned___int64"
    type_list(length(type_list))="unsigned_long_long"
    type_list(length(type_list))="bool"
    type_list(length(type_list))="signed_char"
    type_list(length(type_list))="long"
    type_list(length(type_list))="long_int"
    type_list(length(type_list))="signed_long_int"
    type_list(length(type_list))="unsigned_long"
    type_list(length(type_list))="unsigned_long_int"
    type_list(length(type_list))="float"
    type_list(length(type_list))="double"
    type_list(length(type_list))="long_double"
    type_list(length(type_list))="wchar_t"
    type_list(length(type_list))="__wchar_t"
    type_list(length(type_list))="void"
    type_list(length(type_list))="pointer"

    dim type_list_size
    type_list_size(0)=struct_typesize(unsigned)
    type_list_size(length(type_list))=struct_typesize(__int8)
    type_list_size(length(type_list))=struct_typesize(char)
    type_list_size(length(type_list))=struct_typesize(unsigned___int8)
    type_list_size(length(type_list))=struct_typesize(unsigned_char)
    type_list_size(length(type_list))=struct_typesize(__int16)
    type_list_size(length(type_list))=struct_typesize(short)
    type_list_size(length(type_list))=struct_typesize(short_int)
    type_list_size(length(type_list))=struct_typesize(signed_short_int)
    type_list_size(length(type_list))=struct_typesize(unsigned___int16)
    type_list_size(length(type_list))=struct_typesize(unsigned_short)
    type_list_size(length(type_list))=struct_typesize(unsigned_short_int)
    type_list_size(length(type_list))=struct_typesize(__int32)
    type_list_size(length(type_list))=struct_typesize(signed)
    type_list_size(length(type_list))=struct_typesize(signed_int)
    type_list_size(length(type_list))=struct_typesize(int)
    type_list_size(length(type_list))=struct_typesize(unsigned___int32)
    type_list_size(length(type_list))=struct_typesize(__int64)
    type_list_size(length(type_list))=struct_typesize(long_long)
    type_list_size(length(type_list))=struct_typesize(signed_long_long)
    type_list_size(length(type_list))=struct_typesize(unsigned___int64)
    type_list_size(length(type_list))=struct_typesize(unsigned_long_long)
    type_list_size(length(type_list))=struct_typesize(bool)
    type_list_size(length(type_list))=struct_typesize(signed_char)
    type_list_size(length(type_list))=struct_typesize(long)
    type_list_size(length(type_list))=struct_typesize(long_int)
    type_list_size(length(type_list))=struct_typesize(signed_long_int)
    type_list_size(length(type_list))=struct_typesize(unsigned_long)
    type_list_size(length(type_list))=struct_typesize(unsigned_long_int)
    type_list_size(length(type_list))=struct_typesize(float)
    type_list_size(length(type_list))=struct_typesize(double)
    type_list_size(length(type_list))=struct_typesize(long_double)
    type_list_size(length(type_list))=struct_typesize(wchar_t)
    type_list_size(length(type_list))=struct_typesize(__wchar_t)
    type_list_size(length(type_list))=struct_typesize(void)
    type_list_size(length(type_list))=struct_typesize(pointer)

    sdim type_list_add_original
    sdim type_list_add
    dim type_list_add_size
    dim type_list_add_count
return

#deffunc primitive_manager_copyprimitive str p_type,str p_name
    type_list_add_original(type_list_add_count)=p_type
    type_list_add(type_list_add_count)=p_name
    type_list_add_size(type_list_add_count)=primitive_manager_getsize(p_type)
    type_list_add_count++
return

#defcfunc primitive_manager_isprimitive str p_type, local temp_return
    temp_return=primitive_manager_issystemprimitive(p_type)
    if temp_return==0:{
        repeat type_list_add_count
            if p_type==type_list_add(cnt):{
                temp_return=1
                break
            }
        loop
    }
return temp_return

#defcfunc primitive_manager_issystemprimitive str p_type, local temp_return
    temp_return=0
    repeat length(type_list)
        if p_type==type_list(cnt):{
            temp_return=1
            break
        }
    loop
return temp_return

#defcfunc primitive_manager_getsize str p_type, local temp_return
    temp_return=0
    repeat length(type_list)
        if p_type==type_list(cnt):{
            temp_return=type_list_size(cnt)
            break
        }
    loop
    if temp_return==0:{
        repeat type_list_add_count
            if p_type==type_list_add(cnt):{
                temp_return=type_list_add_size(cnt)
                break
            }
        loop
    }
    return temp_return

#defcfunc primitive_manager_getrealtype str p_type, local temp_return
    temp_return="void"
    switch p_type
    case "float"
    temp_return="float"
    swbreak
    case "double"
    case "long_double"
    temp_return="double"
    swbreak
    case "void"
    temp_return="void"
    swbreak
    case "pointer"
    temp_return="pointer"
    swbreak
    default
    if primitive_manager_getsize(p_type)<=4:{
        temp_return="int"
    } else {
        temp_return="int64"
    }
    swbreak
    swend
return temp_return

#global
primitive_manager_init

#module

#defcfunc string_number_check str p_str, local temp_return,local temp_str
    temp_str=p_str
    temp_return=0
    repeat 10
        if instr(temp_str,0,""+ cnt +"")==0:{
            temp_return=1
            break
        }
    loop
return temp_return

#defcfunc string_alphabet_check str p_str, local temp_return,local temp_str,local temp_word
    temp_str=p_str
    temp_return=0
    sdim temp_word,2
    repeat 'z'-'a'+1,'a'
        poke temp_word,0,cnt
        if instr(temp_str,0,temp_word)==0:{
            temp_return=1
            break
        }
    loop
    if temp_return==0:{
        repeat 'Z'-'A'+1,'A'
            poke temp_word,0,cnt
            if instr(temp_str,0,temp_word)==0:{
                temp_return=1
                break
            }
        loop
    }
return temp_return

#global

parser_txt_path="data/raylib_api.txt","data/rlgl_api.txt","data/raymath_api.txt"
parser_txt_head="rl_","rlgl_","raymath_"

sdim export_txt

export_txt+="#ifndef raylibhsp"+"\n"
export_txt+="\n"
temp=""
notesel temp
noteload "data/callfuncex_module.hsp"
export_txt+=""+temp+"\n"
export_txt+="\n"
noteload "data/struct_module.hsp"
export_txt+=""+temp+"\n"
noteunsel

export_txt+="\n"

sdim export_txt_define
dim export_txt_define_count

sdim export_txt_struct_name
sdim export_txt_struct_member_name
sdim export_txt_struct_member_type
sdim export_txt_struct_member_length
dim export_txt_struct_count

sdim export_txt_typedef_name
sdim export_txt_typedef_type
dim export_txt_typedef_count

sdim export_txt_function_func
sdim export_txt_function_name
sdim export_txt_function_parameter_type
sdim export_txt_function_parameter_name
sdim export_txt_function_return
dim export_txt_function_count

sdim export_txt_enum
sdim export_txt_enum_struct
dim export_txt_enum_count

repeat length(parser_txt_path)

    sdim parser_txt
    notesel parser_txt
    noteload parser_txt_path(cnt)
    noteunsel

    parser_txt_current_head=parser_txt_head(cnt)

    sdim parser_txt_line_original
    split parser_txt,"\n",parser_txt_line_original
    parser_txt=""
    repeat length(parser_txt_line_original)
        sdim temp_word,16

        parser_txt_line=parser_txt_line_original(cnt)

        repeat strlen(parser_txt_line)
            memset temp_word,0,varsize(temp_word),0
            getstr temp_word,parser_txt_line,cnt,0,1
            if temp_word!=" " && temp_word!="\t":parser_txt_line=strmid(parser_txt_line,cnt,strlen(parser_txt_line)-cnt):break
        loop

        if strlen(parser_txt_line)>0:{
            temp_parser_txt_line=parser_txt_line
            parser_txt_line=""
            dim temp_str_check
            dim temp_slash_check
            repeat strlen(temp_parser_txt_line)
                memset temp_word,0,varsize(temp_word),0
                getstr temp_word,temp_parser_txt_line,cnt,0,1
                switch temp_word
                case "*"
                case "("
                case ")"
                case "["
                case "]"
                case ":"
                case ","
                if temp_str_check==2:{

                } else {
                    parser_txt_line+=" "+temp_word+" "
                    if temp_slash_check>0:{
                        parser_txt_line+=" / "
                    }
                    temp_slash_check=0
                }
                swbreak
                
                case "\\"
                if temp_str_check==2:{

                } else {
                    temp_str_check=1
                    if temp_slash_check>0:{
                        parser_txt_line+=" / "
                    }
                    temp_slash_check=0
                }
                parser_txt_line+=temp_word
                swbreak
                
                case "\""
                if temp_str_check==1:{
                    temp_str_check=0
                    if temp_slash_check>0:{
                        parser_txt_line+=" / "
                    }
                    temp_slash_check=0
                    parser_txt_line+=temp_word
                } else {
                    if temp_str_check==2:{
                        temp_str_check=0
                        parser_txt_line+=temp_word+" "
                    } else {
                        temp_str_check=2
                        if temp_slash_check>0:{
                            parser_txt_line+=" / "
                        }
                        temp_slash_check=0
                        parser_txt_line+=" "+temp_word
                    }
                }
                swbreak

                case "/"
                if temp_str_check==2:{
                    parser_txt_line+=temp_word
                } else {
                    temp_slash_check++
                    if temp_slash_check=2:break
                }
                swbreak

                default
                if temp_str_check==2:{

                } else {
                    if temp_slash_check>0:{
                        parser_txt_line+=" / "
                    }
                    temp_slash_check=0
                }
                parser_txt_line+=temp_word
                swbreak

                swend
            loop

            repeat strlen(parser_txt_line)
                memset temp_word,0,varsize(temp_word),0
                getstr temp_word,parser_txt_line,strlen(parser_txt_line)-1-cnt,0,1
                if temp_word!=" " && temp_word!="\t":parser_txt_line=strmid(parser_txt_line,0,strlen(parser_txt_line)-cnt):break
            loop

            parser_txt+=parser_txt_line+"\n"
        }
        await
    loop

    sdim parser_txt_line_original
    split parser_txt,"\n",parser_txt_line_original

    sdim parser_txt_mode

    repeat length(parser_txt_line_original)
        parser_txt_line=parser_txt_line_original(cnt)

        sdim temp_div
        split parser_txt_line," ",temp_div

        sdim parser_txt_line_div
        dim parser_txt_line_div_count
        dim parser_txt_line_div_offset

        dim temp_str_check

        repeat length(temp_div)
            if temp_div(cnt)!="":{
                switch temp_str_check
                case 0
                if strmid(temp_div(cnt),0,1)=="\"" && strmid(temp_div(cnt),-1,1)!="\"":{
                    temp_str_check=1
                    parser_txt_line_div(parser_txt_line_div_count)+=temp_div(cnt)
                } else {
                    parser_txt_line_div(parser_txt_line_div_count)=temp_div(cnt)
                    parser_txt_line_div_count++
                    parser_txt_line_div(parser_txt_line_div_count)=""
                }
                swbreak
                case 1
                if strmid(temp_div(cnt),-1,1)=="\"":{
                    temp_str_check=0
                    parser_txt_line_div(parser_txt_line_div_count)+=temp_div(cnt)
                    parser_txt_line_div_count++
                    parser_txt_line_div(parser_txt_line_div_count)=""
                } else {
                    parser_txt_line_div(parser_txt_line_div_count)+=temp_div(cnt)
                }
                swbreak
                swend
            }
        loop

        if parser_txt_line_div_count>0:{
            if parser_txt_mode!="":{
                switch parser_txt_mode

                case "Define"
                    switch parser_txt_line_div(0)
                    case "Name"
                    case "Type"
                    case "Value"
                    case "Description"
                    swbreak
                    default
                    parser_txt_mode=""
                    export_txt_define_count++
                    export_txt_define(export_txt_define_count)=""
                    swbreak
                    swend
                swbreak

                case "Struct"
                    switch parser_txt_line_div(0)
                    case "Name"
                    case "Description"
                    case "Field"
                    swbreak
                    default
                    parser_txt_mode=""
                    if strlen(export_txt_struct_member_name(export_txt_struct_count))>0:export_txt_struct_member_name(export_txt_struct_count)=strmid(export_txt_struct_member_name(export_txt_struct_count),0,strlen(export_txt_struct_member_name(export_txt_struct_count))-1)
                    if strlen(export_txt_struct_member_type(export_txt_struct_count))>0:export_txt_struct_member_type(export_txt_struct_count)=strmid(export_txt_struct_member_type(export_txt_struct_count),0,strlen(export_txt_struct_member_type(export_txt_struct_count))-1)
                    if strlen(export_txt_struct_member_length(export_txt_struct_count))>0:export_txt_struct_member_length(export_txt_struct_count)=strmid(export_txt_struct_member_length(export_txt_struct_count),0,strlen(export_txt_struct_member_length(export_txt_struct_count))-1)
                    export_txt_struct_count++
                    export_txt_struct_name(export_txt_struct_count)=""
                    export_txt_struct_member_name(export_txt_struct_count)=""
                    export_txt_struct_member_type(export_txt_struct_count)=""
                    export_txt_struct_member_length(export_txt_struct_count)=""
                    swbreak
                    swend
                swbreak

                case "Alias"
                    switch parser_txt_line_div(0)
                    case "Type"
                    case "Name"
                    case "Description"
                    swbreak
                    default
                    parser_txt_mode=""
                    if primitive_manager_isprimitive(export_txt_typedef_type(export_txt_typedef_count))==1:{
                        primitive_manager_copyprimitive ""+ export_txt_typedef_type(export_txt_typedef_count) +"",""+ export_txt_typedef_name(export_txt_typedef_count) +""
                    }
                    export_txt_typedef_count++
                    export_txt_typedef_name(export_txt_typedef_count)=""
                    export_txt_typedef_type(export_txt_typedef_count)=""
                    swbreak
                    swend
                swbreak

                case "Enum"
                    switch parser_txt_line_div(0)
                    case "Name"
                    case "Description"
                    case "Value"
                    swbreak
                    default
                    parser_txt_mode=""
                    if strlen(export_txt_enum(export_txt_enum_count))>=strlen("\n"):{
                        if strmid(export_txt_enum(export_txt_enum_count),-1,strlen("\n"))=="\n":{
                            export_txt_enum(export_txt_enum_count)=strmid(export_txt_enum(export_txt_enum_count),0,strlen(export_txt_enum(export_txt_enum_count))-strlen("\n"))
                        }
                    }
                    export_txt_enum_count++
                    export_txt_enum(export_txt_enum_count)=""
                    export_txt_enum_struct(export_txt_enum_count)=""
                    swbreak
                    swend
                swbreak

                case "Callback"
                swbreak
                
                case "Function"
                    switch parser_txt_line_div(0)
                    case "Name"
                    case "Description"
                    case "Param"
                    swbreak
                    default
                    if ""+ parser_txt_line_div(0)+" "+parser_txt_line_div(1) +""=="Return type":{

                    } else {
                        parser_txt_mode=""

                        if primitive_manager_isprimitive(export_txt_function_return(export_txt_function_count))==0:{
                            export_txt_function_parameter_name(export_txt_function_count)="return_struct,"+ export_txt_function_parameter_name(export_txt_function_count) +""
                            export_txt_function_parameter_type(export_txt_function_count)=""+ export_txt_function_return(export_txt_function_count) +","+ export_txt_function_parameter_type(export_txt_function_count) +""
                        } else:if export_txt_function_return(export_txt_function_count)=="pointer":{
                            export_txt_function_parameter_name(export_txt_function_count)="return_pointer,"+ export_txt_function_parameter_name(export_txt_function_count) +""
                            export_txt_function_parameter_type(export_txt_function_count)="pointer,"+ export_txt_function_parameter_type(export_txt_function_count) +""
                        } else:if primitive_manager_getrealtype(export_txt_function_return(export_txt_function_count))=="int64":{
                            export_txt_function_parameter_name(export_txt_function_count)="return_int64,"+ export_txt_function_parameter_name(export_txt_function_count) +""
                            export_txt_function_parameter_type(export_txt_function_count)="long_long,"+ export_txt_function_parameter_type(export_txt_function_count) +""
                        }

                        if strlen(export_txt_function_parameter_name(export_txt_function_count))>0:{
                            export_txt_function_parameter_name(export_txt_function_count)=strmid(export_txt_function_parameter_name(export_txt_function_count),0,strlen(export_txt_function_parameter_name(export_txt_function_count))-1)
                        }
                        if strlen(export_txt_function_parameter_type(export_txt_function_count))>0:{
                            export_txt_function_parameter_type(export_txt_function_count)=strmid(export_txt_function_parameter_type(export_txt_function_count),0,strlen(export_txt_function_parameter_type(export_txt_function_count))-1)
                        }
                        export_txt_function_count++
                        export_txt_function_func(export_txt_function_count)=""
                        export_txt_function_name(export_txt_function_count)=""
                        export_txt_function_parameter_name(export_txt_function_count)=""
                        export_txt_function_parameter_type(export_txt_function_count)=""
                        export_txt_function_return(export_txt_function_count)=""
                    }
                    swbreak
                    swend
                swbreak

                swend
            }

            if parser_txt_mode=="":{
                switch parser_txt_line_div(0)
                case "Define"
                case "Struct"
                case "Alias"
                case "Enum"
                ;case "Callback"
                case "Function"
                parser_txt_mode=parser_txt_line_div(0)
                swbreak
                swend
            } else {
                switch parser_txt_mode

                case "Define"
                
                    switch parser_txt_line_div(0)
                    case "Name"
                    export_txt_define(export_txt_define_count)+="#define global "+ parser_txt_current_head +""+parser_txt_line_div(2)
                    swbreak
                    case "Value"
                    repeat limit(parser_txt_line_div_count-2,0,parser_txt_line_div_count),2
                        if string_number_check(parser_txt_line_div(cnt))==1:{
                            export_txt_define(export_txt_define_count)+=" "+parser_txt_line_div(cnt)
                        } else {
                            if instr(parser_txt_line_div(cnt),0,"_")==0 || string_alphabet_check(parser_txt_line_div(cnt))==1:{
                                export_txt_define(export_txt_define_count)+=" "+parser_txt_current_head+""+parser_txt_line_div(cnt)
                            } else {
                                export_txt_define(export_txt_define_count)+=" "+parser_txt_line_div(cnt)
                            }
                        }
                    loop
                    swbreak
                    swend

                swbreak

                case "Struct"

                    switch parser_txt_line_div(0)
                    case "Name"
                    export_txt_struct_name(export_txt_struct_count)=""+ parser_txt_current_head +""+parser_txt_line_div(2)
                    export_txt_struct_member_name(export_txt_struct_count)=""
                    export_txt_struct_member_type(export_txt_struct_count)=""
                    export_txt_struct_member_length(export_txt_struct_count)=""
                    swbreak
                    case "Field"
                    sdim temp,,2
                    repeat limit(parser_txt_line_div_count-5,0,parser_txt_line_div_count),5
                        if cnt<parser_txt_line_div_count-1:{
                            temp(0)+=parser_txt_line_div(cnt)
                            if cnt<parser_txt_line_div_count-1-1:temp(0)+=" "
                        } else {
                            temp(1)+=parser_txt_line_div(cnt)
                        }
                    loop
                    temp_length=""
                    sdim temp_list
                    split temp(0)," ",temp_list
                    temp(0)=""
                    repeat length(temp_list)
                        if temp_list(cnt)!="[":{
                            temp(0)+=temp_list(cnt)+" "
                        } else {
                            repeat length(temp_list)-cnt,cnt
                                if string_number_check(temp_list(cnt))==0:{
                                    if temp_list(cnt)=="[" || temp_list(cnt)=="]":{
                                        temp_length+=temp_list(cnt)
                                    } else {
                                        temp_length+=""+parser_txt_current_head+""+temp_list(cnt)+""
                                    }
                                } else {
                                    temp_length+=temp_list(cnt)
                                }
                            loop
                            break
                        }
                    loop
                    if instr(temp_length,0,"[")==-1:temp_length="[1]"
                    if strlen(temp(0))>=1:{
                        if strmid(temp(0),-1,1)==" ":temp(0)=strmid(temp(0),0,strlen(temp(0))-1)
                    }
                    if instr(temp(0),0,"*")!=-1:temp(0)="pointer"
                    strrep temp(0)," ","_"
                    if primitive_manager_isprimitive(temp(0))==1:{
                        export_txt_struct_member_type(export_txt_struct_count)+=temp(0)+","
                    } else {
                        export_txt_struct_member_type(export_txt_struct_count)+=""+ parser_txt_current_head +""+temp(0)+","
                    }
                    export_txt_struct_member_name(export_txt_struct_count)+=temp(1)+","
                    export_txt_struct_member_length(export_txt_struct_count)+=""+temp_length+","
                    swbreak
                    swend

                swbreak

                case "Alias"

                    switch parser_txt_line_div(0)
                    case "Type"
                    repeat limit(parser_txt_line_div_count-2,0,parser_txt_line_div_count),2
                        if cnt==2:export_txt_typedef_type(export_txt_typedef_count)+=""+ parser_txt_current_head +""
                        export_txt_typedef_type(export_txt_typedef_count)+=""+parser_txt_line_div(2) +""
                        if cnt<parser_txt_line_div_count-1:export_txt_typedef_type(export_txt_typedef_count)+=" "
                    loop
                    if instr(export_txt_typedef_type(export_txt_typedef_count),0,"*")!=-1:{
                        export_txt_typedef_type(export_txt_typedef_count)="pointer"
                    }
                    strrep export_txt_typedef_type(export_txt_typedef_count)," ","_"
                    swbreak
                    case "Name"
                    export_txt_typedef_name(export_txt_typedef_count)=""+ parser_txt_current_head +""+parser_txt_line_div(2) +""
                    swbreak
                    swend

                swbreak

                case "Enum"

                    switch parser_txt_line_div(0)
                    case "Name"
                    export_txt_enum_struct(export_txt_enum_count)+="struct_init "+ parser_txt_current_head +""+ parser_txt_line_div(2) +"\n"
                    export_txt_enum_struct(export_txt_enum_count)+="struct_member "+ parser_txt_current_head +""+ parser_txt_line_div(2) +",value,struct_typesize(int)\n"
                    export_txt_enum_struct(export_txt_enum_count)+="struct_done "+ parser_txt_current_head +""+ parser_txt_line_div(2) +""
                    swbreak
                    case "Value"
                    export_txt_enum(export_txt_enum_count)+="#enum global "+ parser_txt_current_head +""+ parser_txt_line_div(2) +""
                    if parser_txt_line_div_count>=6:{
                        export_txt_enum(export_txt_enum_count)+=" = "+ parser_txt_line_div(5) +"\n"
                    } else {
                        export_txt_enum(export_txt_enum_count)+="\n"
                    }
                    swbreak
                    swend

                swbreak

                case "Callback"
                swbreak

                case "Function"
                    switch parser_txt_line_div(0)
                    case "Name"
                    export_txt_function_name(export_txt_function_count)=""+ parser_txt_current_head +""+ parser_txt_line_div(2) +""
                    export_txt_function_func(export_txt_function_count)="#func global _"+ export_txt_function_name(export_txt_function_count) +" \""+ parser_txt_line_div(2) +"\""
                    export_txt_function_parameter_name(export_txt_function_count)=""
                    export_txt_function_parameter_type(export_txt_function_count)=""
                    export_txt_function_return(export_txt_function_count)=""
                    swbreak
                    case "Return"
                    if ""+ parser_txt_line_div(0) +" "+ parser_txt_line_div(1) +""=="Return type":{
                        repeat limit(parser_txt_line_div_count-3,0,parser_txt_line_div_count),3
                            export_txt_function_return(export_txt_function_count)+=""+ parser_txt_line_div(cnt) +""
                            if cnt<parser_txt_line_div_count-1:export_txt_function_return(export_txt_function_count)+=" "
                        loop
                        if export_txt_function_return(export_txt_function_count)=="":{
                            export_txt_function_return(export_txt_function_count)="void"
                        }
                        if instr(export_txt_function_return(export_txt_function_count),0,"*")!=-1:export_txt_function_return(export_txt_function_count)="pointer"
                        strrep export_txt_function_return(export_txt_function_count)," ","_"
                    }
                    swbreak
                    case "Param"
                    export_txt_function_parameter_name(export_txt_function_count)+="p_"+ parser_txt_line_div(5) +","
                    temp=""
                    repeat limit(parser_txt_line_div_count-9-1,0,parser_txt_line_div_count),9
                        temp+=parser_txt_line_div(cnt)
                        if cnt<parser_txt_line_div_count-1-1:temp+=" "
                    loop
                    if instr(temp,0,"*")!=-1 || instr(temp,0,".")!=-1:{
                        temp="pointer"
                    }
                    strrep temp," ","_"
                    if primitive_manager_issystemprimitive(temp)==1:{
                        export_txt_function_parameter_type(export_txt_function_count)+=""+ temp +","
                    } else {
                        export_txt_function_parameter_type(export_txt_function_count)+=""+ parser_txt_current_head +""+ temp +","
                    }
                    swbreak
                    swend
                swbreak

                swend
            }
        }

        await
    loop

loop

repeat export_txt_define_count
    export_txt+=""+ export_txt_define(cnt) +"\n"
loop

export_txt+="\n"

repeat export_txt_enum_count
    export_txt+=""+ export_txt_enum_struct(cnt) +"\n"
    export_txt+=""+ export_txt_enum(cnt) +"\n"
    export_txt+="\n"
loop
repeat export_txt_typedef_count
    if instr(export_txt_typedef_type(cnt),0,"*")!=-1:{
        export_txt+="struct_init "+ export_txt_typedef_name(cnt) +"\n"
        export_txt+="struct_member "+ export_txt_typedef_name(cnt) +",value,struct_typesize(pointer)\n"
        export_txt+="struct_done "+ export_txt_typedef_name(cnt) +"\n"
    } else {
        if primitive_manager_isprimitive(export_txt_typedef_type(cnt))==1:{
            export_txt+="struct_init "+ export_txt_typedef_name(cnt) +"\n"
            export_txt+="struct_member "+ export_txt_typedef_name(cnt) +",value,struct_typesize("+ export_txt_typedef_type(cnt) +")\n"
            export_txt+="struct_done "+ export_txt_typedef_name(cnt) +"\n"
        }
    }
loop

export_txt+="\n"

repeat export_txt_struct_count
    temp_current_struct=export_txt_struct_name(cnt)
    export_txt+="struct_init "+ temp_current_struct +"\n"
    sdim temp_member_name
    sdim temp_member_type
    sdim temp_member_length
    split export_txt_struct_member_name(cnt),",",temp_member_name
    split export_txt_struct_member_type(cnt),",",temp_member_type
    split export_txt_struct_member_length(cnt),",",temp_member_length
    if strlen(temp_member_name(0))>0:{
        repeat length(temp_member_name)
            temp_get_length=strmid(temp_member_length(cnt),1,strlen(temp_member_length(cnt))-2)
            strrep temp_get_length,"][","*"
            if primitive_manager_isprimitive(temp_member_type(cnt))==1:{
                export_txt+="struct_member "+ temp_current_struct +","+ temp_member_name(cnt) +",struct_typesize("+ temp_member_type(cnt) +")*"+ temp_get_length +",struct_typesize("+ temp_member_type(cnt) +")"+"\n"
            } else {
                export_txt+="struct_member "+ temp_current_struct +","+ temp_member_name(cnt) +",struct_gettotal("+ temp_member_type(cnt) +")*"+ temp_get_length +",struct_getmaxalignment("+ temp_member_type(cnt) +")"+"\n"
            }
        loop
    }
    export_txt+="struct_done "+ temp_current_struct +"\n"

    repeat export_txt_typedef_count
        if temp_current_struct==export_txt_typedef_type(cnt):{
            temp_current_typedef_name=export_txt_typedef_name(cnt)
            export_txt+="struct_init "+ temp_current_typedef_name +"\n"
            if strlen(temp_member_name(0))>0:{
                repeat length(temp_member_name)
                    temp_get_length=strmid(temp_member_length(cnt),1,strlen(temp_member_length(cnt))-2)
                    strrep temp_get_length,"][","*"
                    if primitive_manager_isprimitive(temp_member_type(cnt))==1:{
                        export_txt+="struct_member "+ temp_current_typedef_name +","+ temp_member_name(cnt) +",struct_typesize("+ temp_member_type(cnt) +")*"+ temp_get_length +",struct_typesize("+ temp_member_type(cnt) +")"+"\n"
                    } else {
                        export_txt+="struct_member "+ temp_current_typedef_name +","+ temp_member_name(cnt) +",struct_gettotal("+ temp_member_type(cnt) +")*"+ temp_get_length +",struct_getmaxalignment("+ temp_member_type(cnt) +")"+"\n"
                    }
                loop
            }
            export_txt+="struct_done "+ temp_current_typedef_name +"\n"
        }
    loop

    if cnt<export_txt_struct_count-1:export_txt+="\n"
loop

export_txt+="\n"
export_txt+="#module raylibhsp"+"\n"
export_txt+="\n"
export_txt+="#uselib \"raylib.dll\""+"\n"

export_txt+="\n"

repeat export_txt_function_count
    sdim temp_name
    sdim temp_type
    split export_txt_function_parameter_name(cnt),",",temp_name
    split export_txt_function_parameter_type(cnt),",",temp_type

    temp_parameter_count=0

    export_txt+=export_txt_function_func(cnt)+"\n"
    export_txt+="#deffunc __"+ export_txt_function_name(cnt) +" "
    if strlen(temp_name(0))>0:{
        repeat length(temp_name)
            export_txt+="var "+ temp_name(cnt) +""
            if cnt<length(temp_name)-1:export_txt+=","

            temp_parameter_count++
        loop
        export_txt+=",local return_value"
    } else {
        export_txt+="local return_value"
    }
    export_txt+="\n"
    export_txt+="#define global "+ export_txt_function_name(cnt) +""
    if temp_parameter_count>0:{
        export_txt+="("
        repeat temp_parameter_count
            export_txt+="%"+ (cnt+1) +""
            if cnt<temp_parameter_count-1:export_txt+=","
        loop
        export_txt+=")"
        temp=""
        repeat temp_parameter_count
            if primitive_manager_isprimitive(temp_type(cnt))==1 && temp_name(cnt)!="return_struct" && temp_name(cnt)!="return_pointer" && temp_name(cnt)!="return_int64":{
                temp+="dummy_p"+ (cnt+1) +"@raylibhsp=%"+ (cnt+1) +":"
            }
        loop
        if strlen(temp)>0:{
            export_txt+=" "+ temp +""
        } else {
            export_txt+=" "
        }
    } else {
        export_txt+=" "
    }
    export_txt+="__"+ export_txt_function_name(cnt) +""
    if temp_parameter_count>0:{
        export_txt+=" "
        repeat temp_parameter_count
            if primitive_manager_isprimitive(temp_type(cnt))==0 || temp_name(cnt)=="return_struct" || temp_name(cnt)=="return_pointer" || temp_name(cnt)=="return_int64":{
                export_txt+="%"+ (cnt+1) +""
            } else {
                export_txt+="dummy_p"+ (cnt+1) +"@raylibhsp"
            }
            if cnt<temp_parameter_count-1:export_txt+=","
        loop
    }
    export_txt+="\n"
    export_txt+="callfuncex_func _"+ export_txt_function_name(cnt) +"@,"
    temp_return=export_txt_function_return(cnt)
    if primitive_manager_issystemprimitive(temp_return)==0:{
        if primitive_manager_isprimitive(temp_return)==1:{
            repeat export_txt_typedef_count
                if temp_return==export_txt_typedef_name(cnt):{
                    temp_return=export_txt_typedef_type(cnt)
                    break
                }
            loop
        }
    }
    if primitive_manager_isprimitive(temp_return)==1:{
        temp_realtype=primitive_manager_getrealtype(temp_return)
        switch temp_realtype
        case "float"
        export_txt+="CALLFUNCEX_RETURN_FLOAT@"
        swbreak
        case "double"
        export_txt+="CALLFUNCEX_RETURN_DOUBLE@"
        swbreak
        case "void"
        export_txt+="CALLFUNCEX_RETURN_VOID@"
        swbreak
        case "pointer"
        export_txt+="CALLFUNCEX_RETURN_POINTER@"
        swbreak
        case "int"
        export_txt+="CALLFUNCEX_RETURN_INT@"
        swbreak
        case "int64"
        export_txt+="CALLFUNCEX_RETURN_INT64@"
        swbreak
        swend
        
        switch temp_realtype
        case "void"
        case "pointer"
        swbreak
        default
        export_txt+=",struct_typesize("+ temp_return +")"
        swbreak
        swend
    } else {
        export_txt+="CALLFUNCEX_RETURN_STRUCT@" 
    }
    export_txt+="\n"
    if temp_parameter_count>0:{
        repeat temp_parameter_count
            if temp_name(cnt)=="return_struct":{
                export_txt+="#ifndef __hsp64__@"+"\n"
                export_txt+="callfuncex_p_value varptr("+ temp_name(cnt) +"),struct_typesize(pointer)"+"\n"
                export_txt+="#else"+"\n"
                export_txt+="callfuncex_p_value varptr64("+ temp_name(cnt) +"),struct_typesize(pointer)"+"\n"
                export_txt+="#endif"
            } else:if temp_name(cnt)!="return_pointer" && temp_name(cnt)!="return_int64" {
                if primitive_manager_isprimitive(temp_type(cnt))==1:{
                    export_txt+="callfuncex_p_value "+ temp_name(cnt) +","
                } else {
                    export_txt+="callfuncex_p "+ temp_name(cnt) +","
                }
                if primitive_manager_issystemprimitive(temp_type(cnt))==1:{
                    export_txt+="struct_typesize("+ temp_type(cnt) +")"
                } else {
                    export_txt+="struct_gettotal("+ temp_type(cnt) +")"
                }
            }
            if temp_name(cnt)!="return_pointer" && temp_name(cnt)!="return_int64":export_txt+="\n"
        loop
    }
    export_txt+="callfuncex_call return_value"+"\n"
    if temp_parameter_count>0:if temp_name(0)=="return_pointer" || temp_name(0)=="return_int64":{
        export_txt+="return_pointer=return_value"+"\n"
    }
    if primitive_manager_isprimitive(temp_return)==1:{
        switch primitive_manager_getrealtype(temp_return)
        case "void"
        case "pointer"
        export_txt+="return"+"\n"
        swbreak
        case "int64"
        export_txt+="return int(return_value)"+"\n"
        swbreak
        default
        export_txt+="return return_value"+"\n"
        swbreak
        swend
    } else {
        export_txt+="return"+"\n"
    }
    if cnt<export_txt_function_count-1:export_txt+="\n"
loop

export_txt+="\n"

export_txt+="#global"+"\n"

export_txt+="\n"

export_txt+="#endif"+"\n"

notesel export_txt
notesave "raylib.hsp"

mesbox export_txt,640,480,4,0
stop